{"version":3,"sources":["logo.svg","item/item.js","covid-tracker/covid-tracker.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Item","props","href","iso2","target","rel","countryRegion","confirmed","deaths","recovered","CovidTracker","state","feeds","axios","get","then","res","console","log","data","setState","catch","err","className","this","scope","map","item","index","key","src","logo","alt","React","Component","App","hidden","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"+IAAAA,EAAOC,QAAU,IAA0B,kC,6MCE9BC,EAAO,SAACC,GACjB,OACI,4BACE,4BAAI,uBAAGC,KAAO,4CAA6CD,EAAME,KAAOC,OAAO,SAASC,IAAI,uBAAwBJ,EAAME,OAC1H,4BAAMF,EAAMK,eACZ,4BAAML,EAAMM,WACZ,4BAAMN,EAAMO,QACZ,4BAAMP,EAAMQ,aCoCPC,E,4MAvCbC,MAAQ,CACNC,MAAO,M,kEAEY,IAAD,OAClBC,IAAMC,IAAN,4CACCC,MAAK,SAAAC,GACFC,QAAQC,IAAIF,EAAIG,MAChB,IAAMP,EAAQI,EAAIG,KAClB,EAAKC,SAAS,CAACR,MAAOA,OAEzBS,OAAM,SAAAC,GACHL,QAAQC,IAAI,QAASI,Q,+BAIzB,OAAO,yBAAKC,UAAU,iBAChBC,KAAKb,MAAMC,MACX,yBAAKW,UAAU,oBACb,2BAAOA,UAAU,qBACf,2BAAOA,UAAU,+BACf,4BACE,wBAAIE,MAAM,OAAV,QACA,wBAAIA,MAAM,OAAV,iBACA,wBAAIA,MAAM,OAAV,aACA,wBAAIA,MAAM,OAAV,UACA,wBAAIA,MAAM,OAAV,eAGJ,+BACCD,KAAKb,MAAMC,MAAMc,KAAI,SAACC,EAAMC,GAC3B,OAAQ,kBAAC,EAAD,iBAAUD,EAAV,CAAgBE,IAAKD,WAdhB,yBAAKE,IAAKC,IAAMR,UAAU,WAAWS,IAAI,c,GAjB3CC,IAAMC,WCelBC,MAbf,WACE,OACE,yBAAKZ,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKO,IAAKC,IAAMK,QAAM,EAACb,UAAU,WAAWS,IAAI,SAChD,6DACA,4BACA,kBAAC,EAAD,SCFYK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlC,MAAK,SAAAmC,GACJA,EAAaC,gBAEd9B,OAAM,SAAA+B,GACLnC,QAAQmC,MAAMA,EAAMC,c","file":"static/js/main.13867d94.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\n\nexport const Item = (props) => {\n    return (\n        <tr>\n          <td><a href={ 'https://covid19.mathdro.id/api/countries/'+ props.iso2 } target=\"_blank\" rel=\"noopener noreferrer\">{ props.iso2 }</a></td>\n          <td>{ props.countryRegion }</td>\n          <td>{ props.confirmed }</td>\n          <td>{ props.deaths }</td>\n          <td>{ props.recovered }</td>\n        </tr>\n    );\n};","import React from 'react';\nimport axios from 'axios';\nimport logo from '../logo.svg';\nimport { Item } from '../item/item';\n\nclass CovidTracker extends React.Component {\n  state = {\n    feeds: null\n  }\n  componentDidMount() {\n    axios.get(`https://covid19.mathdro.id/api/confirmed`)\n    .then(res => {\n        console.log(res.data);\n        const feeds = res.data;\n        this.setState({feeds: feeds});\n    })\n    .catch(err => {\n        console.log('Err: ', err);\n    });\n  }\n  render() {\n    return <div className=\"covid-wrapper\">\n        {!this.state.feeds ? <img src={logo} className=\"App-logo\" alt=\"logo\" /> :\n          <div className=\"table-responsive\">\n            <table className=\"table table-light\">\n              <thead className=\"table-bordered fixed-header\">\n                <tr>\n                  <th scope=\"col\">Code</th>\n                  <th scope=\"col\">countryRegion</th>\n                  <th scope=\"col\">Confirmed</th>\n                  <th scope=\"col\">Deaths</th>\n                  <th scope=\"col\">Recovered</th>\n                </tr>\n              </thead>\n              <tbody>\n              {this.state.feeds.map((item, index) => {\n                return (<Item {...item} key={index} />)\n              })}\n              </tbody>\n            </table>\n          </div>\n        }\n    </div>\n  }\n}\nexport default CovidTracker;","import React from 'react';\nimport logo from './logo.svg';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './App.css';\n\nimport CovidTracker from './covid-tracker/covid-tracker';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} hidden className=\"App-logo\" alt=\"logo\" />\n        <h1>COVID 19, Coronavirus Tracker</h1>\n        <p></p>\n        <CovidTracker></CovidTracker>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}